name: Deploy to AWS  Environment

inputs:
  AWS_REGION:  
    description: 'deployment region'
    required: true
    default: 'us-east-1'
  CONTAINER_NAME:  
    description: 'container name'
    required: true
  ECS_SERVICE:  
    description: 'service name'
    required: true 
  ECS_CLUSTER:  
    description: 'cluster name'
    required: true
  AWS_SECRET_ACCESS_KEY:  
    description: 'secret key'
    required: true
  AWS_ACCESS_KEY_ID:  
    description: 'access key'
    required: true
  AWS_TASK_DEFINITION:  
    description: 'ecs task name'
    required: true
  DOCKER_IMAGE:  
    description: 'Docker Image'
    required: true

runs:
    using: 'composite'
    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ inputs.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}
      - name: login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.CONTAINER_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker tag ${{ inputs.DOCKER_IMAGE }} $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG 
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        shell: bash
      - name: download task definition
        run: |
            aws ecs describe-task-definition --task-definition ${{ inputs.AWS_TASK_DEFINITION }} --query taskDefinition > task-definition.json
        shell: bash
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ inputs.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.ECS_SERVICE }}
          cluster: ${{ inputs.ECS_CLUSTER }}
          wait-for-service-stability: true
